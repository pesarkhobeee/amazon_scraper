// Code generated by mockery v2.52.2. DO NOT EDIT.

package handlermocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/pesarkhobeee/amazon_scraper/internal/model"
)

// MockMovieScraperService is an autogenerated mock type for the MovieScraperService type
type MockMovieScraperService struct {
	mock.Mock
}

type MockMovieScraperService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMovieScraperService) EXPECT() *MockMovieScraperService_Expecter {
	return &MockMovieScraperService_Expecter{mock: &_m.Mock}
}

// Scrape provides a mock function with given fields: ctx, amazonID
func (_m *MockMovieScraperService) Scrape(ctx context.Context, amazonID string) (*model.MovieInformation, error) {
	ret := _m.Called(ctx, amazonID)

	if len(ret) == 0 {
		panic("no return value specified for Scrape")
	}

	var r0 *model.MovieInformation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.MovieInformation, error)); ok {
		return rf(ctx, amazonID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.MovieInformation); ok {
		r0 = rf(ctx, amazonID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.MovieInformation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, amazonID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMovieScraperService_Scrape_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Scrape'
type MockMovieScraperService_Scrape_Call struct {
	*mock.Call
}

// Scrape is a helper method to define mock.On call
//   - ctx context.Context
//   - amazonID string
func (_e *MockMovieScraperService_Expecter) Scrape(ctx interface{}, amazonID interface{}) *MockMovieScraperService_Scrape_Call {
	return &MockMovieScraperService_Scrape_Call{Call: _e.mock.On("Scrape", ctx, amazonID)}
}

func (_c *MockMovieScraperService_Scrape_Call) Run(run func(ctx context.Context, amazonID string)) *MockMovieScraperService_Scrape_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockMovieScraperService_Scrape_Call) Return(_a0 *model.MovieInformation, _a1 error) *MockMovieScraperService_Scrape_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMovieScraperService_Scrape_Call) RunAndReturn(run func(context.Context, string) (*model.MovieInformation, error)) *MockMovieScraperService_Scrape_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMovieScraperService creates a new instance of MockMovieScraperService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMovieScraperService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMovieScraperService {
	mock := &MockMovieScraperService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
